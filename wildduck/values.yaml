##
## @section Global parameters
##

## @param global.imageRegistry - Global Docker image registry
## @param global.imagePullSecrets - Global Docker registry secret names as an array
##
global:
  ## E.g.
  ## imagePullSecrets:
  ##   - myRegistryKeySecretName
  ##
  imagePullSecrets: []
  storageClass: ""

##
## @section Common parameters
##

## @param nameOverride - String to partially override common.names.fullname template (will maintain the release name)
##
nameOverride: ""
## @param fullnameOverride - String to fully override common.names.fullname template with a string
##
fullnameOverride: ""
## @param clusterDomain - Kubernetes Cluster Domain
##
clusterDomain: cluster.local
## @param commonLabels - Add labels to all the deployed resources
##
commonLabels: {}
## @param commonAnnotations - Add annotations to all the deployed resources
##
commonAnnotations: {}

## @param common - Common options for the chart
##
common:
  ## @param common.domain - Defines the domain for the mailserver and its components
  ##
  baseDomain: "example.com"

  ## @param common.apiDomain - Should be set if the ingress resources should use a different hostname than the baseDomain
  ## default: {{ printf "api.%s" (.Values.common.baseDomain) }}
  apiDomain: ""

  ## @param common.mailDomain - Should be set if the mail server resources should use a different hostname than the baseDomain
  ## default: {{ printf "mail.%s" (.Values.common.baseDomain) }}
  mailDomain: ""

  ## @param common.webmailDomain - Should be set if the ingress resources should use a different domain than the baseDomain
  ## default: {{ printf "webmail.%s" (.Values.common.baseDomain) }}
  webmailDomain: ""

  ## @param common.rspamdDomain - Should be set if the ingress resources should use a different domain than the baseDomain
  ## default: {{ printf "rspamd.%s" (.Values.common.baseDomain) }}
  rspamdDomain: ""

  ## @param common.wildduck - Common wildduck configurations
  ##
  wildduck:
    ## @param common.wildduck.accessToken - Access token for the wildduck api
    ## If no token is set the chart generates one automatically and stores it into "<fullname>-access-token"
    ##
    accessToken: ""

  ## @param common.acme - Enables automated certificate generation
  acme:
    enabled: false
    stage: "staging" # production or staging
    issuerEmail: "acme@example.com"
    caaDomains: [ "letsencrypt.org" ]

  ## @param common.databases - Database information for each component
  ## Setting the username and password is optional. If no username or password is used, the default username and password from mongo.* and redis.* will be used.
  database:
    mongo:
      wildduck:
        database: "wildduck"
        username: "wildduck"
        password: "sup3r-s3cr3t-password"
      webmail:
        database: "webmail"
        username: "webmail"
        password: "sup3r-s3cr3t-password"
      zone-mta:
        database: "zone-mta"
        username: "zone-mta"
        password: "sup3r-s3cr3t-password"
    redis:
      wildduck: 3
      webmail: 5
      rspamd: 4
      zone-mta: 2

## @param tls - Defines the certificate to use for all deployments
## Defines if the chart should automatically create a certificate for every deployment who needs it
##
tls:
  certManager:
    enabled: false
    issuer: "letsencrypt"
    kind: "ClusterIssuer" # Issuer or ClusterIssuer
  selfSigned: false
  existingSecretName: ""

## @param nginx - Defines information about a custom nginx controller
## If enabled, this chart will deploy a nginx controller for mapping the enabled services
## into the hostNetwork
nginx:
  enabled: true
  services:
    smtp_outbound: true # ZoneMTA (Outbound SMTP)
    smtp_inbound: true # Haraka (Inbound SMTP)
    imap: true # Wildduck (IMAP)
    pop3: true # Wildduck (POP3)

  ## @param nginx.image - Image configuration
  ##
  image:
    name: nginx:latest
    pullPolicy: IfNotPresent

## @param serviceAccount - Service account configurations
serviceAccount:
  wildduck:
    ## @param serviceAccount.wildduck.create Specifies whether a service account should be created
    create: true
    ## @param serviceAccount.wildduck.annotations Annotations to add to the service account
    annotations: {}
    ## @param serviceAccount.wildduck.name The name of the service account to use
    ## If not set and create is true, a name is generated using the fullname template
    name: ""
  webmail:
    ## @param serviceAccount.webmail.create Specifies whether a service account should be created
    create: true
    ## @param serviceAccount.webmail.annotations Annotations to add to the service account
    annotations: {}
    ## @param serviceAccount.webmail.name The name of the service account to use
    ## If not set and create is true, a name is generated using the fullname template
    name: ""
  haraka:
    ## @param serviceAccount.haraka.create Specifies whether a service account should be created
    create: true
    ## @param serviceAccount.haraka.annotations Annotations to add to the service account
    annotations: { }
    ## @param serviceAccount.haraka.name The name of the service account to use
    ## If not set and create is true, a name is generated using the fullname template
    name: ""
  rspamd:
    ## @param serviceAccount.rspamd.create Specifies whether a service account should be created
    create: true
    ## @param serviceAccount.rspamd.annotations Annotations to add to the service account
    annotations: { }
    ## @param serviceAccount.rspamd.name The name of the service account to use
    ## If not set and create is true, a name is generated using the fullname template
    name: ""
  zonemta:
    ## @param serviceAccount.zonemta.create Specifies whether a service account should be created
    create: true
    ## @param serviceAccount.zonemta.annotations Annotations to add to the service account
    annotations: {}
    ## @param serviceAccount.zonemta.name The name of the service account to use
    ## If not set and create is true, a name is generated using the fullname template
    name: ""
  nginx:
    ## @param serviceAccount.wildduck.create Specifies whether a service account should be created
    create: true
    ## @param serviceAccount.wildduck.annotations Annotations to add to the service account
    annotations: {}
    ## @param serviceAccount.wildduck.name The name of the service account to use
    ## If not set and create is true, a name is generated using the fullname template
    name: ""
  mongo:
    ## @param serviceAccount.mongo.create Specifies whether a service account should be created
    create: true
    ## @param serviceAccount.mongo.annotations Annotations to add to the service account
    annotations: {}
    ## @param serviceAccount.mongo.name The name of the service account to use
    ## If not set and create is true, a name is generated using the fullname template
    name: ""
  redis:
    ## @param serviceAccount.redis.create Specifies whether a service account should be created
    create: true
    ## @param serviceAccount.redis.annotations Annotations to add to the service account
    annotations: {}
    ## @param serviceAccount.redis.name The name of the service account to use
    ## If not set and create is true, a name is generated using the fullname template
    name: ""

## @param wildduck - Wildduck configuration
wildduck:

  ## @param wildduck.replicaCount - Replicas to deploy
  ##
  replicaCount: 1

  ## @param wildduck.image - Image configuration
  ##
  image:
    #name: nodemailer/wildduck:v1.34.0
    name: nodemailer/wildduck
    pullPolicy: IfNotPresent

  ## @param wildduck.service - Service configuration
  ##
  service:
    name: ""
    type: ClusterIP
    ports:
      http: 80
      imap: 143
      pop3: 110

  ## @param wildduck.ingress - Ingress configuration for the wildduck api
  ##
  ingress:
    ## @param wildduck.ingress.enabled - Set to true to enable ingress record generation
    ##
    enabled: true
    ## @param wildduck.ingress.existingSecretName - Use a existing tls secret for this ingress resource
    #
    existingSecretName: ""
    ## @param wildduck.ingress.selfSigned - Create a TLS secret for this ingress record using self-signed certificates generated by helm
    ##
    selfSigned: false
    ## @param wildduck.ingress.pathType - Ingress path type
    ##
    pathType: ImplementationSpecific
    ## @param wildduck.ingress.hostname - Default host for the ingress resource
    ## The default value is {{ .Values.common.apiDomain }}
    ##
    hostname: ""
    ## @param wildduck.ingress.path - The Path to Nginx. You may need to set this to '/*' in order to use this with ALB ingress controllers.
    path: /
    ## @param wildduck.ingress.annotations - Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.
    ## Example:
    ## annotations:
    ##    cert-manager.io/cluster-issuer: letsencrypt
    ##
    annotations: { }
    ## @param wildduck.ingress.ingressClassName Set the ingressClassName on the ingress record for k8s 1.18+
    ## This is supported in Kubernetes 1.18+ and required if you have more than one IngressClass marked as the default for your cluster .
    ## ref: https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/
    ##
    ingressClassName: "nginx"
    ## @param wildduck.ingress.tls Create TLS Secret
    ## TLS certificates will be retrieved from a TLS secret with name: {{- printf "%s-tls" (include "domains.apiDomain.tls.secretName" .) }}
    ## You can use the ingress.secrets parameter to create this TLS secret or relay on cert-manager to create it
    ##
    tls: false

  ## Other configurations
  ##
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  resources: {}
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}

## @param webmail - Webmail configuration
##
webmail:

  ## @param webmail.service - Enables/Disables the webmail component
  ##
  enabled: false

  ## @param webmail.replicaCount - Replicas to deploy
  ##
  replicaCount: 1

  ## @param webmail.image - Image configuration
  ##
  image:
    name: nodemailer/wildduck-webmail
    pullPolicy: IfNotPresent

  ## @param webmail.service - Service configuration
  ##
  service: 
    name: ""
    type: ClusterIP
    ports:
      http: 80

  ## @param webmail.ingress - Ingress configuration
  ##
  ingress:
    ## @param webmail.ingress.enabled - Set to true to enable ingress record generation
    ##
    enabled: true
    ## @param wildduck.ingress.existingSecretName - Use a existing tls secret for this ingress resource
    #
    existingSecretName: ""
    ## @param webmail.ingress.selfSigned - Create a TLS secret for this ingress record using self-signed certificates generated by helm
    ##
    selfSigned: false
    ## @param webmail.ingress.pathType - Ingress path type
    ##
    pathType: ImplementationSpecific
    ## @param webmail.ingress.hostname - Default host for the ingress resource
    ## Default value is webmail.{{.Values.common.baseDomain}}
    ##
    hostname: ""
    ## @param webmail.ingress.path - The Path to Nginx. You may need to set this to '/*' in order to use this with ALB ingress controllers.
    path: /
    ## @param webmail.ingress.annotations - Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.
    ## Example:
    ## annotations:
    ##    cert-manager.io/cluster-issuer: letsencrypt
    ##
    annotations: {}
    ## @param webmail.ingress.ingressClassName Set the ingressClassName on the ingress record for k8s 1.18+
    ## This is supported in Kubernetes 1.18+ and required if you have more than one IngressClass marked as the default for your cluster .
    ## ref: https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/
    ##
    ingressClassName: ""
    ## @param webmail.ingress.tls Create TLS Secret
    ## TLS certificates will be retrieved from a TLS secret with name: {{- printf "%s-tls" .Values.webmail.ingress.hostname }}
    ## You can use the ingress.secrets parameter to create this TLS secret or relay on cert-manager to create it
    ##
    tls: false

  ## Other configurations
  ##
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  resources: {}
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}

## @param zonemta - ZoneMTA (Outbound SMTP) configuration
##
zonemta:

  ## @param zonemta.replicaCount Replicas to deploy
  ##
  replicaCount: 1

  ## @param zonemta.image Image configuration
  ##
  image:
    name: nodemailer/zonemta-wildduck
    pullPolicy: IfNotPresent

  ## @param zonemta.service Service configuration
  ##
  service:
    name: ""
    type: ClusterIP
    ports:
      smtp: 587

  ## Other configurations
  ##
  podAnnotations: {}
  podSecurityContext: { }
  securityContext: { }
  resources: { }
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80
  nodeSelector: { }
  tolerations: [ ]
  affinity: { }

## @param haraka - Haraka (Inbound SMTP) configuration
##
haraka:

  ## @param haraka.replicaCount - Replicas to deploy
  ##
  replicaCount: 1

  ## @param haraka.image - Image configuration
  ##
  image:
    name: nodemailer/haraka-wildduck
    pullPolicy: IfNotPresent

  ## @param haraka.service - Service configuration
  ##
  service:
    name: ""
    type: ClusterIP
    ports:
      smtp: 25

  ## Other configurations
  ##
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  resources: {}
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}

## @param rspamd - Rspamd configuration
##
rspamd:

  ## @param rspamd.replicaCount - Replicas to deploy
  ##
  replicaCount: 1

  ## @param rspamd.image - Image configuration
  ##
  image:
    name: nodemailer/rspamd
    pullPolicy: IfNotPresent

  ## @param rspamd.service - Service configuration
  ##
  service:
    name: ""
    type: ClusterIP
    ports:
      rspamd: 11333
      http: 80

  ## @param rspamd.webinterface - Webinterface configuration
  webinterface:
    ## @param rspamd.webinterface.enabled - Enables the administrative ui
    enabled: false

    ## @param rspamd.webinterface.password - Password for the webinterface
    password: ""

    ## @param rspamd.webinterface.password_privileged - Privileged password for the webinterface
    password_privileged: ""

    ## @param rspamd.webinterface.ingress - Ingress configuration
    ##
    ingress:
      ## @param rspamd.webinterface.ingress.enabled - Set to true to enable ingress record generation
      ##
      enabled: true
      ## @param wildduck.ingress.existingSecretName - Use a existing tls secret for this ingress resource
      #
      existingSecretName: ""
      ## @param rspamd.webinterface.ingress.selfSigned - Create a TLS secret for this ingress record using self-signed certificates generated by helm
      ##
      selfSigned: false
      ## @param rspamd.webinterface.ingress.pathType - Ingress path type
      ##
      pathType: ImplementationSpecific
      ## @param rspamd.webinterface.ingress.hostname - Default host for the ingress resource
      ## Default value is rspamd.{{.Values.common.baseDomain}}
      ##
      hostname: ""
      ## @param rspamd.webinterface.ingress.path - The Path to Nginx. You may need to set this to '/*' in order to use this with ALB ingress controllers.
      path: /
      ## @param rspamd.webinterface.ingress.annotations - Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.
      ## Example:
      ## annotations:
      ##    cert-manager.io/cluster-issuer: letsencrypt
      ##
      annotations: {}
      ## @param rspamd.webinterface.ingress.ingressClassName Set the ingressClassName on the ingress record for k8s 1.18+
      ## This is supported in Kubernetes 1.18+ and required if you have more than one IngressClass marked as the default for your cluster .
      ## ref: https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/
      ##
      ingressClassName: ""
      ## @param rspamd.webinterface.ingress.tls Create TLS Secret
      ## TLS certificates will be retrieved from a TLS secret with name: {{- printf "%s-tls" .Values.rspamd.webinterface.ingress.hostname }}
      ## You can use the ingress.secrets parameter to create this TLS secret or relay on cert-manager to create it
      ##
      tls: false

  ## Other configurations
  ##
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}

  # Increase resources
  # @see https://github.com/bramhoven/wildduck-k8s/issues/16#issuecomment-1412931513
  resources:
    limits:
      cpu: 600m
      memory: 500Mi
    requests:
      cpu: 500m
      memory: 500Mi

## @param mongo - MongoDB configuration
##
mongo:

  ## @param mongo.external - Configuration of an external mongodb database if enabled
  ## Make sure your user has access to all wildduck databases
  ##
  external:
    ## @param mongo.external.enabled - Defines if the deployment should use an external mongodb database
    ##
    enabled: false
    ## @param mongo.external.host - Hostname of the external database
    ##
    host: ""
    ## @param mongo.external.port - Port of the external database
    ##
    port: 27017
    ## @param mongo.external.username - Username of the external database
    ##
    username: ""
    ## @param mongo.external.password - Password of the external database
    ##
    password: ""

  ## @param mongo.username
  ## @param mongo.password
  ##
  username: "wildduck"
  password: "sup3r-s3cr3t-password"

  ## @param mongo.persistence - Persistence configuration
  ##
  persistence:
    enabled: true
    existingClaim: ""
    storageClass: ""
    accessModes:
      - ReadWriteOnce
    size: 8Gi

  ## @param mongo.service - Configuration of the mongodb service
  ##
  service:
    name: ""
    type: ClusterIP
    port: "27017"

  ## Other configurations
  ##
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

  ## Increase resources
  ##
  resources:
    limits:
      cpu: 600m
      memory: 500Mi
    requests:
      cpu: 500m
      memory: 500Mi

## @param redis - Redis configuration
##
redis:

  ## @param redis.external - Configuration of an external redis database if enabled
  ##
  external:
    ## @param redis.external.enabled - Defines if the deployment should use an external redis database
    ##
    enabled: false
    ## @param redis.external.host - Hostname of the external database
    ##
    host: ""
    ## @param redis.external.port - Port of the external database
    ##
    port: "6379"
    ## @param redis.external.username - Username of the external database
    ##
    username: ""
    ## @param redis.external.password - Password of the external database
    ##
    password: ""

  ## @param redis.password
  ##
  password: "sup3r-s3cr3t-password"

  ## @param redis.persistence - Persistence configuration
  ##
  persistence:
    enabled: true
    existingClaim: ""
    storageClass: ""
    accessModes:
      - ReadWriteOnce
    size: 8Gi

  ## @param redis.service - Configuration of the redis service
  ##
  service:
    name: ""
    type: ClusterIP
    port: "6379"

  ## Other configurations
  ##
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}